{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "edfff3fc-9f2c-4c4c-af77-ad84d9381c34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello python\n",
      "hello python\n",
      "hello python\n",
      "hello python\n",
      "hello python\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a  two digit number 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the number is below 10\n",
      "5\n",
      "the number is below 10\n",
      "6\n",
      "the number is below 10\n",
      "7\n",
      "the number is below 10\n",
      "8\n",
      "the number is below 10\n",
      "9\n",
      "the number is below 10\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "# ans 1. for loop is used for a predefined range of iteration and\\n\",\n",
    "    # while loop is used to check condition and then iterate untill the condition is true\\n\",\n",
    "for x in range(0,5):\n",
    "    print(\"hello python\"),\n",
    " #while loop example\n",
    "x=int(input(\"enter a  two digit number\"))\n",
    "while x<=10:\n",
    "    print(\"the number is below 10\")\n",
    "    print(x)\n",
    "    x=x+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b8c62003-7f00-4196-9f55-6cc5f8f16ca0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sum of 1st 10 natural number is= 55\n",
      "product of 1st 10 natural number is= 3628800\n",
      "sum = 55\n",
      "product= 3628800\n"
     ]
    }
   ],
   "source": [
    "#Q2 sol sum and product of 1st 10 natural number\\n\",\n",
    "x=0\n",
    "y=1\n",
    "for i in range(1,11):\n",
    "    x=x+i\n",
    "    y=y*i\n",
    "print(\"sum of 1st 10 natural number is=\",x)\n",
    "print(\"product of 1st 10 natural number is=\",y)\n",
    "\n",
    "# sol of bove using while loop\\n\",\n",
    "s=0\n",
    "p=1\n",
    "i=1\n",
    "while i<11:\n",
    "    s=s+i\n",
    "    p=p*i\n",
    "    i=i+1\n",
    "print(\"sum =\",s)\n",
    "print(\"product=\",p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "24e9c605-47a6-4490-b167-a663f6bc9349",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter value 240\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "your electricity bill is = 1450.0\n"
     ]
    }
   ],
   "source": [
    "unit=float(input(\"enter value\"))\n",
    "bill=0\n",
    "if unit<100 or unit==100:\n",
    "    bill=unit*4.5\n",
    "if unit>100 or unit==200:\n",
    "    bill=450+((unit-100)*6)\n",
    "if unit>200 or unit==300:\n",
    "    bill=450+600+((unit-200)*10)\n",
    "if unit>300 and unit!=310:\n",
    "    bill=450+600+1000+((unit-300)*20)\n",
    "if unit==310:\n",
    "    print(\"your bill is rs =\",2250)\n",
    "else:\n",
    "    print(\"your electricity bill is =\",bill)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "276e2cd3-3b4f-4f64-8b19-87d84cf4b506",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 8, 27, 64, 125, 216, 343, 512, 729, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 9261, 10648, 12167, 13824, 15625, 17576, 19683, 21952, 24389, 29791, 32768, 35937, 39304, 42875, 46656, 50653, 54872, 59319, 68921, 74088, 79507, 85184, 91125, 97336, 103823, 110592, 117649, 132651, 140608, 148877, 157464, 166375, 175616, 185193, 195112, 205379, 226981, 238328, 250047, 262144, 274625, 287496, 300763, 314432, 328509, 357911, 373248, 389017, 405224, 421875, 438976, 456533, 474552, 493039, 531441, 551368, 571787, 592704, 614125, 636056, 658503, 681472, 704969, 753571, 778688, 804357, 830584, 857375, 884736, 912673, 941192, 970299]\n",
      "\n",
      "\n",
      "[1, 8, 27, 64, 125, 216, 343, 512, 729, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 9261, 10648, 12167, 13824, 15625, 17576, 19683, 21952, 24389, 29791, 32768, 35937, 39304, 42875, 46656, 50653, 54872, 59319, 68921, 74088, 79507, 85184, 91125, 97336, 103823, 110592, 117649, 132651, 140608, 148877, 157464, 166375, 175616, 185193, 195112, 205379, 226981, 238328, 250047, 262144, 274625, 287496, 300763, 314432, 328509, 357911, 373248, 389017, 405224, 421875, 438976, 456533, 474552, 493039, 531441, 551368, 571787, 592704, 614125, 636056, 658503, 681472, 704969, 753571, 778688, 804357, 830584, 857375, 884736, 912673, 941192, 970299]\n"
     ]
    }
   ],
   "source": [
    "#q4 sol\n",
    "\n",
    "c=list(range(1,101))\n",
    "m=[i**3 for i in c]\n",
    "newlst=[]\n",
    "for t in m:\n",
    "    if t%4 or t%5:\n",
    "        newlst.append(t)\n",
    "print(newlst) \n",
    "\n",
    "# by using while loop\n",
    "print('\\n')\n",
    "resultlst=[]\n",
    "count=0\n",
    "while count<=(len(m)-1):\n",
    "    if m[count]%4 or m[count]%5:\n",
    "        resultlst.append(m[count])\n",
    "    count=count+1    \n",
    "        \n",
    "print(resultlst) \n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8444bf14-7cf4-4c14-a040-0a4de1bc0933",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the total no of vowel = 11\n"
     ]
    }
   ],
   "source": [
    "#5 sol for total number of vowel\n",
    "string = \"I want to become a data scientist\"\n",
    "count1=0\n",
    "for i in range (len(string)-1):\n",
    "    if (string[i]=='a') or (string[i]=='e')or (string[i]=='i')or (string[i]=='o')or (string[i]=='u'):\n",
    "        count1=count1+1\n",
    "print('the total no of vowel =',count1)        \n",
    "        \n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
